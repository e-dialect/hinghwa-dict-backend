{
  "apifoxCli": "1.1.0",
  "item": [
    {
      "item": [
        {
          "id": "96a44671-7eae-4abd-8068-e5a8578d87a3",
          "name": "LG0101 账号密码登录(登录用户user_test)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "login"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"user_test\",\r\n    \"password\": \"123456\"\r\n}",
              "generateMode": "normal",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.token`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`token`, value);console.log('已设置环境变量【token】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【token】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.id`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`user_id`, value);console.log('已设置环境变量【user_id】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【user_id】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4183271,
            "createdAt": "2021-07-29T14:43:37.000Z",
            "updatedAt": "2021-08-12T16:27:18.000Z",
            "deletedAt": null,
            "apiDetailId": 5318056,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "mock": {
                    "mock": "@string"
                  },
                  "title": "权"
                },
                "id": {
                  "type": "integer",
                  "title": "用户id"
                }
              },
              "required": [
                "token",
                "id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "mock": {
                    "mock": "@cname"
                  },
                  "title": "用户名"
                },
                "password": {
                  "type": "string",
                  "mock": {
                    "mock": "@string('lower', 1, 3)"
                  },
                  "title": "密码"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5318056,
            "httpApiCaseId": 67325887,
            "httpApiName": "LG0101 账号密码登录",
            "httpApiPath": "/login",
            "httpApiMethod": "post",
            "httpApiCaseName": "登录用户user_test",
            "id": "5481b044-570f-4357-8d1f-e5850154ddf7",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "0b5bd2e0-46ae-4cd9-9ead-52ececad9b16",
          "name": "US0301 更新用户信息（除password和email外）(US0301 更新用户信息（除password和email外）)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user\": {\n        \"avatar\": \"http://dummyimage.com/88x31\",\n        \"county\": \"沙湾县\",\n        \"points_sum\": 8,\n        \"nickname\": \"曾涛\",\n        \"title\": {\n            \"title\": \"许\",\n            \"color\": \"#79f297\"\n        },\n        \"telephone\": \"18629551886\",\n        \"town\": \"西盟佤族自治县\",\n        \"points_now\": 15,\n        \"birthday\": \"2009-12-23\"\n    }\n}",
              "generateMode": "normal",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "preProcessors.0.customScript",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.environment.get(\"token\");",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`$.user.telephone 等于 18155364287`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.user.telephone`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`18155364287`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4116007,
            "createdAt": "2021-07-28T16:52:38.000Z",
            "updatedAt": "2021-08-01T09:15:33.000Z",
            "deletedAt": null,
            "apiDetailId": 5298310,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "mock": {
                    "mock": "@string"
                  }
                }
              },
              "required": [
                "token"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {},
                  "x-apifox-orders": [
                    "01H6K4T5H1FKFBT2QDVDQ92QZS"
                  ],
                  "required": [],
                  "x-apifox-refs": {
                    "01H6K4T5H1FKFBT2QDVDQ92QZS": {
                      "$ref": "#/definitions/1011863"
                    }
                  }
                }
              },
              "x-apifox-orders": [
                "user"
              ],
              "x-apifox-refs": {},
              "required": [
                "user"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5298310,
            "httpApiCaseId": 67325909,
            "httpApiName": "US0301 更新用户信息（除password和email外）",
            "httpApiPath": "/users/{id}",
            "httpApiMethod": "put",
            "httpApiCaseName": "US0301 更新用户信息（除password和email外）",
            "id": "0f1c560b-7307-4ac8-927d-083d4fe1f975",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        }
      ],
      "name": "用户信息修改"
    }
  ],
  "info": {
    "name": "用户信息修改"
  },
  "dataSchemas": {
    "1011863": {
      "type": "object",
      "properties": {
        "nickname": {
          "type": "string",
          "title": "昵称",
          "mock": {
            "mock": "@cname"
          }
        },
        "telephone": {
          "type": "string",
          "title": "电话"
        },
        "birthday": {
          "type": "string",
          "title": "生日",
          "mock": {
            "mock": "@date('yyyy-MM-dd')"
          }
        },
        "avatar": {
          "type": "string",
          "title": "头像",
          "description": "头像的url地址",
          "mock": {
            "mock": "@image"
          }
        },
        "county": {
          "type": "string",
          "title": "县区",
          "description": "用户所在县区",
          "mock": {
            "mock": "@county"
          }
        },
        "town": {
          "type": "string",
          "title": "乡镇",
          "description": "用户所在乡镇",
          "mock": {
            "mock": "@county"
          }
        }
      },
      "x-apifox-orders": [
        "nickname",
        "birthday",
        "telephone",
        "avatar",
        "county",
        "town"
      ],
      "title": "[入] user_update",
      "name": "[入] user_update"
    }
  },
  "mockRules": {
    "rules": [],
    "enableSystemRule": true
  },
  "environment": {
    "id": 510825,
    "name": "测试环境",
    "baseUrl": "http://127.0.0.1:8000",
    "baseUrls": {
      "default": "http://127.0.0.1:8000"
    },
    "variable": {
      "id": "08f07488-44be-47bb-82d8-7a2037680106",
      "name": "测试环境",
      "baseUrl": "http://127.0.0.1:8000",
      "baseUrls": {
        "default": "http://127.0.0.1:8000"
      },
      "values": [
        {
          "type": "any",
          "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWQiOjEsImV4cCI6MTY5MTMzNDQxOC4xNzgyMjZ9.G4VOuMCrE_SwF3qw1Nq8fIwILC2AhUmQ3TlTmv3vnjs",
          "key": "token",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "87",
          "key": "quiz_id",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "word_id_2",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "word_id_1",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "token_2",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "word_id_3",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "2",
          "key": "user_id",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "17",
          "key": "article_id",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "comment_id_1",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "comment_id_2",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "like_num_2",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": 6,
          "key": "num_pre",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "7",
          "key": "num_later",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "2",
          "key": "id",
          "initialValue": "2"
        },
        {
          "type": "any",
          "value": "13",
          "key": "music_id",
          "initialValue": "13"
        },
        {
          "type": "any",
          "value": "undefined",
          "key": "rewards_id",
          "initialValue": "undefined"
        },
        {
          "type": "any",
          "value": "undefined",
          "key": "title_id",
          "initialValue": "undefined"
        },
        {
          "type": "any",
          "value": "SP000011",
          "key": "products_id",
          "initialValue": "SP000011"
        },
        {
          "type": "any",
          "value": "DD000024",
          "key": "order_id",
          "isBindInitial": false,
          "initialValue": "undefined"
        },
        {
          "type": "any",
          "value": "JL000039",
          "key": "transaction_id",
          "initialValue": "JL000039"
        }
      ]
    },
    "type": "normal",
    "parameter": {
      "header": [],
      "query": [],
      "body": [],
      "cookie": []
    }
  },
  "globals": {
    "baseUrl": "",
    "baseUrls": {},
    "variable": {
      "id": "e362dfca-4c10-492d-9417-57d2a77ff8dc",
      "baseUrl": "",
      "baseUrls": {},
      "values": []
    },
    "parameter": {
      "header": [],
      "query": [],
      "body": [],
      "cookie": []
    }
  },
  "isServerBuild": false,
  "isTestFlowControl": false
}
