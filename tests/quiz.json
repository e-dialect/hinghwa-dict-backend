{
    "apifoxCli": "1.1.0",
    "item": [
        {
            "item": [
                {
                    "id": "dd3bdf62-3a3e-47c5-afeb-4370ad4b3adb",
                    "name": "LG0101 账号密码登录(登录用户admin)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["login"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            },
                            {"key": "Content-Type", "value": "application/json"}
                        ],
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"testtest123\"\r\n}"
                        },
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.extractor",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    "      try{",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$.token`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          const jsonData = pm.response.json();",
                                    "          let value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        ",
                                    "        switch (typeof value) {",
                                    "          case 'object':",
                                    "            value = JSON.stringify(value);",
                                    "            break;",
                                    "          default:",
                                    "            value = String(value);",
                                    "            break;",
                                    "        }",
                                    "      ",
                                    "        pm.environment.set(`token`, value);console.log('已设置环境变量【'+ `token` + '】，值为【' + value + '】')",
                                    "      } catch(e) {",
                                    "        e.message = '提取变量【token】出错：' + e.message;",
                                    "        throw e;",
                                    "      }",
                                    "  "
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string",
                                    "mock": {"mock": "@string"},
                                    "title": "权"
                                },
                                "id": {"type": "integer", "title": "用户id"}
                            },
                            "required": ["token", "id"]
                        },
                        "defaultEnable": true,
                        "id": 4183271,
                        "name": "成功",
                        "apiDetailId": 5318056,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2021-07-29T14:43:37.000Z",
                        "updatedAt": "2021-08-12T16:27:18.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 5318056,
                        "httpApiCaseId": 32697822,
                        "httpApiName": "LG0101 账号密码登录",
                        "httpApiPath": "/login",
                        "httpApiMethod": "post",
                        "httpApiCaseName": "登录用户admin"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "8fe5020a-c5f1-4261-92fc-07f987363235",
                    "name": "QZ0201 搜索测试题(QZ0201 搜索测试题)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes"],
                            "host": ["127", "0", "0", "1"],
                            "query": [{"key": "keywords", "value": ""}],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            }
                        ],
                        "method": "GET",
                        "body": {},
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.extractor",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    "      try{",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$.result.length`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          const jsonData = pm.response.json();",
                                    "          let value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        ",
                                    "        switch (typeof value) {",
                                    "          case 'object':",
                                    "            value = JSON.stringify(value);",
                                    "            break;",
                                    "          default:",
                                    "            value = String(value);",
                                    "            break;",
                                    "        }",
                                    "      ",
                                    "        pm.environment.set(`num_pre`, value);console.log('已设置环境变量【'+ `num_pre` + '】，值为【' + value + '】')",
                                    "      } catch(e) {",
                                    "        e.message = '提取变量【num_pre】出错：' + e.message;",
                                    "        throw e;",
                                    "      }",
                                    "  "
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "type": "object",
                            "properties": {
                                "result": {
                                    "type": "array",
                                    "items": {"$ref": "#/definitions/13080595"}
                                }
                            },
                            "x-apifox-orders": ["result"],
                            "required": ["result"]
                        },
                        "defaultEnable": true,
                        "id": 70049266,
                        "name": "成功",
                        "apiDetailId": 29663288,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:28:36.000Z",
                        "updatedAt": "2022-07-15T11:29:54.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29663288,
                        "httpApiCaseId": 37835120,
                        "httpApiName": "QZ0201 搜索测试题",
                        "httpApiPath": "/quizzes",
                        "httpApiMethod": "get",
                        "httpApiCaseName": "QZ0201 搜索测试题"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "45f41980-c1f7-456a-bc0a-7d3e92263b37",
                    "name": "QZ0102 增加单个测试(QZ0102 增加单个测试)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            },
                            {"key": "Content-Type", "value": "application/json"}
                        ],
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"question\": \"和半关八\",\n    \"options\": [\n        \"或级意着再二学们声张不样民或。\",\n        \"层儿拉进它道色万各多动导京。\"\n    ],\n    \"answer\": 3,\n    \"explanation\": \"全制思报这党交动备第音求和。精家般线除厂此车广共前机写八。县认头间题快次级九主马毛高华后。青革是位复更老位据真得东。\"\n}"
                        },
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(pm.variables.replaceIn(`Quiz添加结果检查`), function() {",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          let jsonData;",
                                    "          try {",
                                    "            jsonData = pm.response.json();",
                                    "          } catch(e) {",
                                    "            let text = pm.response.text();",
                                    "            // xml 转 json",
                                    "            const xml2js = require('xml2js');",
                                    "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                                    "            let json;",
                                    "            let xmlParseOptions = {",
                                    "                explicitArray: false,",
                                    "                trim: true,",
                                    "                ignoreAttrs: true,",
                                    "            };",
                                    "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                                    "                jsonData = result;",
                                    "            });",
                                    "          }",
                                    "          const value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        ",
                                    "        pm.expectWithKey({key:'$',value:value}).to.exist",
                                    "      });"
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "x-apifox-overrides": {},
                            "type": "object",
                            "x-apifox-refs": {},
                            "properties": {
                                "quiz": {
                                    "$ref": "#/definitions/13080595",
                                    "x-apifox-overrides": {}
                                }
                            },
                            "required": ["quiz"],
                            "x-apifox-orders": ["quiz"]
                        },
                        "defaultEnable": true,
                        "id": 70048663,
                        "name": "成功",
                        "apiDetailId": 29662986,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:22:03.000Z",
                        "updatedAt": "2022-07-23T08:30:31.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29662986,
                        "httpApiCaseId": 34623800,
                        "httpApiName": "QZ0102 增加单个测试",
                        "httpApiPath": "/quizzes",
                        "httpApiMethod": "post",
                        "httpApiCaseName": "QZ0102 增加单个测试"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "faa6229a-34f4-4d94-b835-c35cd8389ee8",
                    "name": "QZ0201 搜索测试题(QZ0201 搜索测试题)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes"],
                            "host": ["127", "0", "0", "1"],
                            "query": [{"key": "keywords", "value": ""}],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            }
                        ],
                        "method": "GET",
                        "body": {},
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "commonScript.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    " ____string2Number = function(value, errorMsg) {",
                                    "  if(typeof value !== 'string'){",
                                    "    return value;",
                                    "  }",
                                    "  // 转换成数字类型后比较",
                                    "  if (/^\\-?\\d+$/.test(value)) {",
                                    "      return parseInt(value);",
                                    "  } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                                    "      return parseFloat(value);",
                                    "  } else {",
                                    "      throw new Error(errorMsg || '数据类型不匹配')",
                                    "  }",
                                    "}",
                                    "",
                                    " ____formatValues = function(value, stringCompareValue, comparison) {",
                                    "  try{",
                                    "    const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                                    "    let compareValue;",
                                    "    switch (typeof value) {",
                                    "        case 'string':",
                                    "            if (isNumberComparisons) {",
                                    "                value = ____string2Number(value);",
                                    "                compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'object':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            try {",
                                    "                compareValue = JSON.parse(stringCompareValue);",
                                    "            } catch (e) {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'boolean':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                                    "            break;",
                                    "        case 'number':",
                                    "            if (isNumberComparisons) {",
                                    "              compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "              compareValue = stringCompareValue;",
                                    "              value = '' + value;",
                                    "            }",
                                    "            break;",
                                    "        case 'null':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('null 值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                                    "            break;",
                                    "        default:",
                                    "            compareValue = stringCompareValue;",
                                    "            break;",
                                    "    }",
                                    "    return { compareValue, value };",
                                    "  } catch(e) {",
                                    "    console.log(e);",
                                    "    throw e;",
                                    "  }",
                                    "}",
                                    ""
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.extractor",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    "      try{",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$.result.length`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          const jsonData = pm.response.json();",
                                    "          let value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        ",
                                    "        switch (typeof value) {",
                                    "          case 'object':",
                                    "            value = JSON.stringify(value);",
                                    "            break;",
                                    "          default:",
                                    "            value = String(value);",
                                    "            break;",
                                    "        }",
                                    "      ",
                                    "        pm.environment.set(`num_later`, value);console.log('已设置环境变量【'+ `num_later` + '】，值为【' + value + '】')",
                                    "      } catch(e) {",
                                    "        e.message = '提取变量【num_later】出错：' + e.message;",
                                    "        throw e;",
                                    "      }",
                                    "  "
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.1.customScript",
                                "type": "text/javascript",
                                "exec": [
                                    "var num_pre = Number(pm.environment.get('num_pre'));",
                                    "",
                                    "pm.environment.set('num_pre', Number(num_pre)+1);"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.2.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(pm.variables.replaceIn(`quiz数量校验`), function() {",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`num_pre`);",
                                    "          const value = pm.environment.get(expression)",
                                    "      ",
                                    "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{num_later}}`), 'equal');",
                                    "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                                    "      });"
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "type": "object",
                            "properties": {
                                "result": {
                                    "type": "array",
                                    "items": {"$ref": "#/definitions/13080595"}
                                }
                            },
                            "x-apifox-orders": ["result"],
                            "required": ["result"]
                        },
                        "defaultEnable": true,
                        "id": 70049266,
                        "name": "成功",
                        "apiDetailId": 29663288,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:28:36.000Z",
                        "updatedAt": "2022-07-15T11:29:54.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29663288,
                        "httpApiCaseId": 37842102,
                        "httpApiName": "QZ0201 搜索测试题",
                        "httpApiPath": "/quizzes",
                        "httpApiMethod": "get",
                        "httpApiCaseName": "QZ0201 搜索测试题"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "ac2d47fe-1fff-42d0-a555-a0589bcc8558",
                    "name": "QZ0101 获取单个测试(QZ0101 获取单个测试)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes", "1"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            }
                        ],
                        "method": "GET",
                        "body": {},
                        "type": "http"
                    },
                    "response": [],
                    "event": [],
                    "responseDefinition": {
                        "jsonSchema": {
                            "x-apifox-overrides": {},
                            "type": "object",
                            "properties": {
                                "quiz": {
                                    "$ref": "#/definitions/13080595",
                                    "x-apifox-overrides": {}
                                }
                            },
                            "x-apifox-refs": {},
                            "x-apifox-orders": ["quiz"],
                            "required": ["quiz"]
                        },
                        "defaultEnable": true,
                        "id": 70047710,
                        "name": "成功",
                        "apiDetailId": 29662407,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:04:02.000Z",
                        "updatedAt": "2022-07-23T07:28:13.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29662407,
                        "httpApiCaseId": 34623801,
                        "httpApiName": "QZ0101 获取单个测试",
                        "httpApiPath": "/quizzes/{id}",
                        "httpApiMethod": "get",
                        "httpApiCaseName": "QZ0101 获取单个测试"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "2befb86c-577e-48f6-b404-92f60369ce7e",
                    "name": "QZ0103 修改单个测试(QZ0103 修改单个测试)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes", "1"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            },
                            {"key": "Content-Type", "value": "application/json"}
                        ],
                        "method": "PUT",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"quiz\": {\n        \"question\": \"石农来\",\n        \"options\": [\n            \"史经口土农北阶办非安说声从西。\",\n            \"青国十接持划标眼此今色事品行必示组接。\",\n            \"都完队术王军活易置义切并万。\",\n            \"带越候着义相可中量加下周极能要且他。\",\n            \"成强为三清方制条面化运天值美划心那。\"\n        ],\n        \"answer\": 55,\n        \"explanation\": \"不是该斗即么布北王空放果。第导展七意术权且还都音目该广色它。命手成论具重话除置书毛都。八五少外在表快光色率我路。电层济量精由知性员认治了要需众多形。决须达极格着力第院克准委等委界直习。确划给年才加派由务流历无红被半意因。\"\n    }\n}"
                        },
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.extractor",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    "      try{",
                                    "        ",
                                    "      const jsonData = pm.response.json();",
                                    "      let value = jsonData;",
                                    "        ",
                                    "        switch (typeof value) {",
                                    "          case 'object':",
                                    "            value = JSON.stringify(value);",
                                    "            break;",
                                    "          default:",
                                    "            value = String(value);",
                                    "            break;",
                                    "        }",
                                    "      ",
                                    "        pm.environment.set(`quiz_new`, value);console.log('已设置环境变量【'+ `quiz_new` + '】，值为【' + value + '】')",
                                    "      } catch(e) {",
                                    "        e.message = '提取变量【quiz_new】出错：' + e.message;",
                                    "        throw e;",
                                    "      }",
                                    "  "
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "type": "object",
                            "properties": {
                                "quiz": {
                                    "$ref": "#/definitions/13080595",
                                    "x-apifox-overrides": {}
                                }
                            },
                            "x-apifox-orders": ["quiz"],
                            "required": ["quiz"]
                        },
                        "defaultEnable": true,
                        "id": 70048846,
                        "name": "成功",
                        "apiDetailId": 29663120,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:23:50.000Z",
                        "updatedAt": "2022-07-23T08:32:09.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29663120,
                        "httpApiCaseId": 34623802,
                        "httpApiName": "QZ0103 修改单个测试",
                        "httpApiPath": "/quizzes/{id}",
                        "httpApiMethod": "put",
                        "httpApiCaseName": "QZ0103 修改单个测试"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "cac56a42-0012-436f-8774-496ba3bc3451",
                    "name": "QZ0101 获取单个测试(QZ0101 获取单个测试)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes", "1"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            }
                        ],
                        "method": "GET",
                        "body": {},
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "commonScript.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    " ____string2Number = function(value, errorMsg) {",
                                    "  if(typeof value !== 'string'){",
                                    "    return value;",
                                    "  }",
                                    "  // 转换成数字类型后比较",
                                    "  if (/^\\-?\\d+$/.test(value)) {",
                                    "      return parseInt(value);",
                                    "  } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                                    "      return parseFloat(value);",
                                    "  } else {",
                                    "      throw new Error(errorMsg || '数据类型不匹配')",
                                    "  }",
                                    "}",
                                    "",
                                    " ____formatValues = function(value, stringCompareValue, comparison) {",
                                    "  try{",
                                    "    const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                                    "    let compareValue;",
                                    "    switch (typeof value) {",
                                    "        case 'string':",
                                    "            if (isNumberComparisons) {",
                                    "                value = ____string2Number(value);",
                                    "                compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'object':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            try {",
                                    "                compareValue = JSON.parse(stringCompareValue);",
                                    "            } catch (e) {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'boolean':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                                    "            break;",
                                    "        case 'number':",
                                    "            if (isNumberComparisons) {",
                                    "              compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "              compareValue = stringCompareValue;",
                                    "              value = '' + value;",
                                    "            }",
                                    "            break;",
                                    "        case 'null':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('null 值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                                    "            break;",
                                    "        default:",
                                    "            compareValue = stringCompareValue;",
                                    "            break;",
                                    "    }",
                                    "    return { compareValue, value };",
                                    "  } catch(e) {",
                                    "    console.log(e);",
                                    "    throw e;",
                                    "  }",
                                    "}",
                                    ""
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(pm.variables.replaceIn(`quiz修改校验`), function() {",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          let jsonData;",
                                    "          try {",
                                    "            jsonData = pm.response.json();",
                                    "          } catch(e) {",
                                    "            let text = pm.response.text();",
                                    "            // xml 转 json",
                                    "            const xml2js = require('xml2js');",
                                    "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                                    "            let json;",
                                    "            let xmlParseOptions = {",
                                    "                explicitArray: false,",
                                    "                trim: true,",
                                    "                ignoreAttrs: true,",
                                    "            };",
                                    "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                                    "                jsonData = result;",
                                    "            });",
                                    "          }",
                                    "          const value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{quiz_new}}`), 'equal');",
                                    "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                                    "      });"
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "x-apifox-overrides": {},
                            "type": "object",
                            "properties": {
                                "quiz": {
                                    "$ref": "#/definitions/13080595",
                                    "x-apifox-overrides": {}
                                }
                            },
                            "x-apifox-refs": {},
                            "x-apifox-orders": ["quiz"],
                            "required": ["quiz"]
                        },
                        "defaultEnable": true,
                        "id": 70047710,
                        "name": "成功",
                        "apiDetailId": 29662407,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:04:02.000Z",
                        "updatedAt": "2022-07-23T07:28:13.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29662407,
                        "httpApiCaseId": 38220543,
                        "httpApiName": "QZ0101 获取单个测试",
                        "httpApiPath": "/quizzes/{id}",
                        "httpApiMethod": "get",
                        "httpApiCaseName": "QZ0101 获取单个测试"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "5a6dcb66-a143-471a-93f6-3ccb59afce1b",
                    "name": "QZ0104 删除单个测试(QZ0104 删除单个测试)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes", "1"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            }
                        ],
                        "method": "DELETE",
                        "body": {},
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "commonScript.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    " ____string2Number = function(value, errorMsg) {",
                                    "  if(typeof value !== 'string'){",
                                    "    return value;",
                                    "  }",
                                    "  // 转换成数字类型后比较",
                                    "  if (/^\\-?\\d+$/.test(value)) {",
                                    "      return parseInt(value);",
                                    "  } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                                    "      return parseFloat(value);",
                                    "  } else {",
                                    "      throw new Error(errorMsg || '数据类型不匹配')",
                                    "  }",
                                    "}",
                                    "",
                                    " ____formatValues = function(value, stringCompareValue, comparison) {",
                                    "  try{",
                                    "    const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                                    "    let compareValue;",
                                    "    switch (typeof value) {",
                                    "        case 'string':",
                                    "            if (isNumberComparisons) {",
                                    "                value = ____string2Number(value);",
                                    "                compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'object':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            try {",
                                    "                compareValue = JSON.parse(stringCompareValue);",
                                    "            } catch (e) {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'boolean':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                                    "            break;",
                                    "        case 'number':",
                                    "            if (isNumberComparisons) {",
                                    "              compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "              compareValue = stringCompareValue;",
                                    "              value = '' + value;",
                                    "            }",
                                    "            break;",
                                    "        case 'null':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('null 值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                                    "            break;",
                                    "        default:",
                                    "            compareValue = stringCompareValue;",
                                    "            break;",
                                    "    }",
                                    "    return { compareValue, value };",
                                    "  } catch(e) {",
                                    "    console.log(e);",
                                    "    throw e;",
                                    "  }",
                                    "}",
                                    ""
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(pm.variables.replaceIn(`Quiz删除校验`), function() {",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          let jsonData;",
                                    "          try {",
                                    "            jsonData = pm.response.json();",
                                    "          } catch(e) {",
                                    "            let text = pm.response.text();",
                                    "            // xml 转 json",
                                    "            const xml2js = require('xml2js');",
                                    "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                                    "            let json;",
                                    "            let xmlParseOptions = {",
                                    "                explicitArray: false,",
                                    "                trim: true,",
                                    "                ignoreAttrs: true,",
                                    "            };",
                                    "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                                    "                jsonData = result;",
                                    "            });",
                                    "          }",
                                    "          const value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{}`), 'equal');",
                                    "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                                    "      });"
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {"type": "object", "properties": {}},
                        "defaultEnable": true,
                        "id": 70048940,
                        "name": "成功",
                        "apiDetailId": 29663170,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:25:39.000Z",
                        "updatedAt": "2022-07-15T11:25:39.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29663170,
                        "httpApiCaseId": 34623803,
                        "httpApiName": "QZ0104 删除单个测试",
                        "httpApiPath": "/quizzes/{id}",
                        "httpApiMethod": "delete",
                        "httpApiCaseName": "QZ0104 删除单个测试"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "6f0397e9-9c38-478a-9eaf-c8b892255591",
                    "name": "QZ0201 搜索测试题(QZ0201 搜索测试题)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes"],
                            "host": ["127", "0", "0", "1"],
                            "query": [{"key": "keywords", "value": ""}],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            }
                        ],
                        "method": "GET",
                        "body": {},
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "commonScript.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    " ____string2Number = function(value, errorMsg) {",
                                    "  if(typeof value !== 'string'){",
                                    "    return value;",
                                    "  }",
                                    "  // 转换成数字类型后比较",
                                    "  if (/^\\-?\\d+$/.test(value)) {",
                                    "      return parseInt(value);",
                                    "  } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                                    "      return parseFloat(value);",
                                    "  } else {",
                                    "      throw new Error(errorMsg || '数据类型不匹配')",
                                    "  }",
                                    "}",
                                    "",
                                    " ____formatValues = function(value, stringCompareValue, comparison) {",
                                    "  try{",
                                    "    const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                                    "    let compareValue;",
                                    "    switch (typeof value) {",
                                    "        case 'string':",
                                    "            if (isNumberComparisons) {",
                                    "                value = ____string2Number(value);",
                                    "                compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'object':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            try {",
                                    "                compareValue = JSON.parse(stringCompareValue);",
                                    "            } catch (e) {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'boolean':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                                    "            break;",
                                    "        case 'number':",
                                    "            if (isNumberComparisons) {",
                                    "              compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "              compareValue = stringCompareValue;",
                                    "              value = '' + value;",
                                    "            }",
                                    "            break;",
                                    "        case 'null':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('null 值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                                    "            break;",
                                    "        default:",
                                    "            compareValue = stringCompareValue;",
                                    "            break;",
                                    "    }",
                                    "    return { compareValue, value };",
                                    "  } catch(e) {",
                                    "    console.log(e);",
                                    "    throw e;",
                                    "  }",
                                    "}",
                                    ""
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.extractor",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    "      try{",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$.result.length`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          const jsonData = pm.response.json();",
                                    "          let value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        ",
                                    "        switch (typeof value) {",
                                    "          case 'object':",
                                    "            value = JSON.stringify(value);",
                                    "            break;",
                                    "          default:",
                                    "            value = String(value);",
                                    "            break;",
                                    "        }",
                                    "      ",
                                    "        pm.environment.set(`num_later`, value);console.log('已设置环境变量【'+ `num_later` + '】，值为【' + value + '】')",
                                    "      } catch(e) {",
                                    "        e.message = '提取变量【num_later】出错：' + e.message;",
                                    "        throw e;",
                                    "      }",
                                    "  "
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.1.customScript",
                                "type": "text/javascript",
                                "exec": [
                                    "var num_pre = Number(pm.environment.get('num_pre'));",
                                    "",
                                    "pm.environment.set('num_pre', Number(num_pre)-1);"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.2.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(pm.variables.replaceIn(`quiz数量校验`), function() {",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`num_pre`);",
                                    "          const value = pm.environment.get(expression)",
                                    "      ",
                                    "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{num_later}}`), 'equal');",
                                    "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                                    "      });"
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "type": "object",
                            "properties": {
                                "result": {
                                    "type": "array",
                                    "items": {"$ref": "#/definitions/13080595"}
                                }
                            },
                            "x-apifox-orders": ["result"],
                            "required": ["result"]
                        },
                        "defaultEnable": true,
                        "id": 70049266,
                        "name": "成功",
                        "apiDetailId": 29663288,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:28:36.000Z",
                        "updatedAt": "2022-07-15T11:29:54.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29663288,
                        "httpApiCaseId": 37913169,
                        "httpApiName": "QZ0201 搜索测试题",
                        "httpApiPath": "/quizzes",
                        "httpApiMethod": "get",
                        "httpApiCaseName": "QZ0201 搜索测试题"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "422ec1b1-9abc-46bc-b18d-08dedb1e350b",
                    "name": "QZ0102 增加单个测试(QZ0102 增加单个测试)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            },
                            {"key": "Content-Type", "value": "application/json"}
                        ],
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"question\": \"面个发以做级\",\n    \"options\": [\n        \"精复系即分百世东由图则接门按理教。\",\n        \"干影不层反线将广存道却以三只对规加联。\",\n        \"报立新走必少备多想类民级满反。\"\n    ],\n    \"answer\": 78,\n    \"explanation\": \"因整局反这身各京天取共府花许信。少研作单自大其行然种入列接具得在。规称文但成许农者这世热维周非。切二万易由想极就界万带决科。青关图党它提众识消中意然书江化办想。\"\n}"
                        },
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(pm.variables.replaceIn(`Quiz添加结果检查`), function() {",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          let jsonData;",
                                    "          try {",
                                    "            jsonData = pm.response.json();",
                                    "          } catch(e) {",
                                    "            let text = pm.response.text();",
                                    "            // xml 转 json",
                                    "            const xml2js = require('xml2js');",
                                    "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                                    "            let json;",
                                    "            let xmlParseOptions = {",
                                    "                explicitArray: false,",
                                    "                trim: true,",
                                    "                ignoreAttrs: true,",
                                    "            };",
                                    "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                                    "                jsonData = result;",
                                    "            });",
                                    "          }",
                                    "          const value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        ",
                                    "        pm.expectWithKey({key:'$',value:value}).to.exist",
                                    "      });"
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "x-apifox-overrides": {},
                            "type": "object",
                            "x-apifox-refs": {},
                            "properties": {
                                "quiz": {
                                    "$ref": "#/definitions/13080595",
                                    "x-apifox-overrides": {}
                                }
                            },
                            "required": ["quiz"],
                            "x-apifox-orders": ["quiz"]
                        },
                        "defaultEnable": true,
                        "id": 70048663,
                        "name": "成功",
                        "apiDetailId": 29662986,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:22:03.000Z",
                        "updatedAt": "2022-07-23T08:30:31.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29662986,
                        "httpApiCaseId": 34623804,
                        "httpApiName": "QZ0102 增加单个测试",
                        "httpApiPath": "/quizzes",
                        "httpApiMethod": "post",
                        "httpApiCaseName": "QZ0102 增加单个测试"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "34daa6b8-528a-4172-bc80-8a940d876c2c",
                    "name": "QZ0102 增加单个测试(QZ0102 增加单个测试)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            },
                            {"key": "Content-Type", "value": "application/json"}
                        ],
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"question\": \"议总龙\",\n    \"options\": [\n        \"示期第用那车后现七被感办。\"\n    ],\n    \"answer\": 3,\n    \"explanation\": \"共合提过明验金条置道治年响以称不证。三争有战例子县管真土并增。为现目数往历外有计标展识全火。\"\n}"
                        },
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(pm.variables.replaceIn(`Quiz添加结果检查`), function() {",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          let jsonData;",
                                    "          try {",
                                    "            jsonData = pm.response.json();",
                                    "          } catch(e) {",
                                    "            let text = pm.response.text();",
                                    "            // xml 转 json",
                                    "            const xml2js = require('xml2js');",
                                    "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                                    "            let json;",
                                    "            let xmlParseOptions = {",
                                    "                explicitArray: false,",
                                    "                trim: true,",
                                    "                ignoreAttrs: true,",
                                    "            };",
                                    "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                                    "                jsonData = result;",
                                    "            });",
                                    "          }",
                                    "          const value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        ",
                                    "        pm.expectWithKey({key:'$',value:value}).to.exist",
                                    "      });"
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "x-apifox-overrides": {},
                            "type": "object",
                            "x-apifox-refs": {},
                            "properties": {
                                "quiz": {
                                    "$ref": "#/definitions/13080595",
                                    "x-apifox-overrides": {}
                                }
                            },
                            "required": ["quiz"],
                            "x-apifox-orders": ["quiz"]
                        },
                        "defaultEnable": true,
                        "id": 70048663,
                        "name": "成功",
                        "apiDetailId": 29662986,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:22:03.000Z",
                        "updatedAt": "2022-07-23T08:30:31.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29662986,
                        "httpApiCaseId": 34623805,
                        "httpApiName": "QZ0102 增加单个测试",
                        "httpApiPath": "/quizzes",
                        "httpApiMethod": "post",
                        "httpApiCaseName": "QZ0102 增加单个测试"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "b805e9cc-7431-4c32-839e-1f9e3fbdea72",
                    "name": "QZ0102 增加单个测试(QZ0102 增加单个测试)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            },
                            {"key": "Content-Type", "value": "application/json"}
                        ],
                        "method": "POST",
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"question\": \"日过活记别当\",\n    \"options\": [\n        \"开回公下理式起包周状大建太毛府战。\",\n        \"最太整日门什头业往流把事单西局车部。\"\n    ],\n    \"answer\": 2,\n    \"explanation\": \"万区确群界海感车又达如带民儿高。者织实先加转高除江现实并格员片。得结话济为里表响声速我江准切问。政力下新部果利斯干中干连示八带。\"\n}"
                        },
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(pm.variables.replaceIn(`Quiz添加结果检查`), function() {",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          let jsonData;",
                                    "          try {",
                                    "            jsonData = pm.response.json();",
                                    "          } catch(e) {",
                                    "            let text = pm.response.text();",
                                    "            // xml 转 json",
                                    "            const xml2js = require('xml2js');",
                                    "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                                    "            let json;",
                                    "            let xmlParseOptions = {",
                                    "                explicitArray: false,",
                                    "                trim: true,",
                                    "                ignoreAttrs: true,",
                                    "            };",
                                    "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                                    "                jsonData = result;",
                                    "            });",
                                    "          }",
                                    "          const value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        ",
                                    "        pm.expectWithKey({key:'$',value:value}).to.exist",
                                    "      });"
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "x-apifox-overrides": {},
                            "type": "object",
                            "x-apifox-refs": {},
                            "properties": {
                                "quiz": {
                                    "$ref": "#/definitions/13080595",
                                    "x-apifox-overrides": {}
                                }
                            },
                            "required": ["quiz"],
                            "x-apifox-orders": ["quiz"]
                        },
                        "defaultEnable": true,
                        "id": 70048663,
                        "name": "成功",
                        "apiDetailId": 29662986,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:22:03.000Z",
                        "updatedAt": "2022-07-23T08:30:31.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29662986,
                        "httpApiCaseId": 34623806,
                        "httpApiName": "QZ0102 增加单个测试",
                        "httpApiPath": "/quizzes",
                        "httpApiMethod": "post",
                        "httpApiCaseName": "QZ0102 增加单个测试"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "2fdededb-5dbf-44f8-b268-c7e5d6ed307b",
                    "name": "QZ0201 搜索测试题(QZ0201 搜索测试题)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes"],
                            "host": ["127", "0", "0", "1"],
                            "query": [{"key": "keywords", "value": ""}],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            }
                        ],
                        "method": "GET",
                        "body": {},
                        "type": "http"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "commonScript.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    " ____string2Number = function(value, errorMsg) {",
                                    "  if(typeof value !== 'string'){",
                                    "    return value;",
                                    "  }",
                                    "  // 转换成数字类型后比较",
                                    "  if (/^\\-?\\d+$/.test(value)) {",
                                    "      return parseInt(value);",
                                    "  } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                                    "      return parseFloat(value);",
                                    "  } else {",
                                    "      throw new Error(errorMsg || '数据类型不匹配')",
                                    "  }",
                                    "}",
                                    "",
                                    " ____formatValues = function(value, stringCompareValue, comparison) {",
                                    "  try{",
                                    "    const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                                    "    let compareValue;",
                                    "    switch (typeof value) {",
                                    "        case 'string':",
                                    "            if (isNumberComparisons) {",
                                    "                value = ____string2Number(value);",
                                    "                compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'object':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            try {",
                                    "                compareValue = JSON.parse(stringCompareValue);",
                                    "            } catch (e) {",
                                    "                compareValue = stringCompareValue;",
                                    "            }",
                                    "            break;",
                                    "        case 'boolean':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                                    "            break;",
                                    "        case 'number':",
                                    "            if (isNumberComparisons) {",
                                    "              compareValue = ____string2Number(stringCompareValue);",
                                    "            } else {",
                                    "              compareValue = stringCompareValue;",
                                    "              value = '' + value;",
                                    "            }",
                                    "            break;",
                                    "        case 'null':",
                                    "            if (isNumberComparisons) {",
                                    "                throw new Error('null 值不能使用 ' + comparison + ' 方式比较')",
                                    "            }",
                                    "            compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                                    "            break;",
                                    "        default:",
                                    "            compareValue = stringCompareValue;",
                                    "            break;",
                                    "    }",
                                    "    return { compareValue, value };",
                                    "  } catch(e) {",
                                    "    console.log(e);",
                                    "    throw e;",
                                    "  }",
                                    "}",
                                    ""
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.0.extractor",
                                "type": "text/javascript",
                                "exec": [
                                    "",
                                    "      try{",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`$.result.length`);",
                                    "          const JSONPath = require('jsonpath-plus').JSONPath;",
                                    "          const jsonData = pm.response.json();",
                                    "          let value = JSONPath({",
                                    "            json: jsonData,",
                                    "            path: expression,",
                                    "            wrap: false",
                                    "          });",
                                    "          ",
                                    "        ",
                                    "        switch (typeof value) {",
                                    "          case 'object':",
                                    "            value = JSON.stringify(value);",
                                    "            break;",
                                    "          default:",
                                    "            value = String(value);",
                                    "            break;",
                                    "        }",
                                    "      ",
                                    "        pm.environment.set(`num_later`, value);console.log('已设置环境变量【'+ `num_later` + '】，值为【' + value + '】')",
                                    "      } catch(e) {",
                                    "        e.message = '提取变量【num_later】出错：' + e.message;",
                                    "        throw e;",
                                    "      }",
                                    "  "
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.1.customScript",
                                "type": "text/javascript",
                                "exec": [
                                    "var num_pre = Number(pm.environment.get('num_pre'));",
                                    "",
                                    "pm.environment.set('num_pre', Number(num_pre)+3);"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "postProcessors.2.assertion",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(pm.variables.replaceIn(`quiz数量校验`), function() {",
                                    "        ",
                                    "          const expression = pm.variables.replaceIn(`num_pre`);",
                                    "          const value = pm.variables.get(expression)",
                                    "      ",
                                    "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{num_later}}`), 'equal');",
                                    "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                                    "      });"
                                ]
                            }
                        }
                    ],
                    "responseDefinition": {
                        "jsonSchema": {
                            "type": "object",
                            "properties": {
                                "result": {
                                    "type": "array",
                                    "items": {"$ref": "#/definitions/13080595"}
                                }
                            },
                            "x-apifox-orders": ["result"],
                            "required": ["result"]
                        },
                        "defaultEnable": true,
                        "id": 70049266,
                        "name": "成功",
                        "apiDetailId": 29663288,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:28:36.000Z",
                        "updatedAt": "2022-07-15T11:29:54.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29663288,
                        "httpApiCaseId": 34623807,
                        "httpApiName": "QZ0201 搜索测试题",
                        "httpApiPath": "/quizzes",
                        "httpApiMethod": "get",
                        "httpApiCaseName": "QZ0201 搜索测试题"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                },
                {
                    "id": "498d4b26-9de8-47b8-bbbc-2f3a9de73ea5",
                    "name": "QZ0202 随机测试题(QZ0202 随机测试题)",
                    "request": {
                        "url": {
                            "protocol": "http",
                            "port": "8000",
                            "path": ["quizzes", "random"],
                            "host": ["127", "0", "0", "1"],
                            "query": [],
                            "variable": []
                        },
                        "header": [
                            {"key": "token", "value": "{{token}}"},
                            {
                                "key": "User-Agent",
                                "value": "apifox/1.0.0 (https://www.apifox.cn)"
                            }
                        ],
                        "method": "GET",
                        "body": {},
                        "type": "http"
                    },
                    "response": [],
                    "event": [],
                    "responseDefinition": {
                        "jsonSchema": {
                            "x-apifox-overrides": {},
                            "type": "object",
                            "properties": {
                                "quiz": {
                                    "$ref": "#/definitions/13080595",
                                    "x-apifox-overrides": {}
                                }
                            },
                            "x-apifox-refs": {},
                            "x-apifox-orders": ["quiz"],
                            "required": ["quiz"]
                        },
                        "defaultEnable": true,
                        "id": 70049339,
                        "name": "成功",
                        "apiDetailId": 29663329,
                        "projectId": 0,
                        "code": 200,
                        "contentType": "json",
                        "ordering": 1,
                        "createdAt": "2022-07-15T11:30:51.000Z",
                        "updatedAt": "2022-07-23T08:32:52.000Z",
                        "deletedAt": null
                    },
                    "metaInfo": {
                        "httpApiId": 29663329,
                        "httpApiCaseId": 34644618,
                        "httpApiName": "QZ0202 随机测试题",
                        "httpApiPath": "/quizzes/random",
                        "httpApiMethod": "get",
                        "httpApiCaseName": "QZ0202 随机测试题"
                    },
                    "type": "http",
                    "protocolProfileBehavior": {"disableUrlEncoding": false}
                }
            ],
            "name": "QZ模块理想状况"
        }
    ],
    "info": {"name": "QZ模块理想状况"},
    "dataSchemas": {
        "13080595": {
            "type": "object",
            "properties": {
                "question": {
                    "type": "string",
                    "title": "问题",
                    "mock": {"mock": "@ctitle"}
                },
                "options": {
                    "type": "array",
                    "items": {"type": "string", "mock": {"mock": "@csentence"}},
                    "title": "选项"
                },
                "explanation": {
                    "type": "string",
                    "title": "答案解析",
                    "mock": {"mock": "@cparagraph"}
                },
                "answer": {"type": "integer", "title": "答案序号"},
                "id": {"type": "integer"}
            },
            "x-apifox-orders": ["question", "options", "answer", "explanation", "id"],
            "required": ["question", "answer", "options", "explanation", "id"],
            "title": "quiz_all"
        }
    },
    "environment": {
        "id": 510825,
        "name": "测试环境",
        "baseUrls": {"default": "http://127.0.0.1:8000"},
        "variable": {
            "id": "4af0bf72-ba1c-46b6-825c-d239aad490f2",
            "name": "测试环境",
            "values": [
                {
                    "type": "any",
                    "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InJvY2siLCJpZCI6MywiZXhwIjoxNjU5NjM1MTYwLjM4MjI2M30.fOdrqFgw4qze3gpm9cAkjXZQRd95j1BlWljNPUum9f0",
                    "key": "token"
                },
                {"type": "any", "value": "3", "key": "num"},
                {"type": "any", "value": "73", "key": "num_later"},
                {"type": "any", "value": 19, "key": "num_pre"}
            ]
        },
        "type": "normal",
        "parameter": {"header": [], "query": [], "body": [], "cookie": []}
    },
    "globals": {
        "variable": {"id": "e9c40ddb-fe71-42b6-89b7-00e03fae80ee", "values": []},
        "parameter": {"header": [], "query": [], "body": [], "cookie": []}
    },
    "isServerBuild": false
}
