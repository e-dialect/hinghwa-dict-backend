{
  "apifoxCli": "1.1.0",
  "item": [
    {
      "item": [
        {
          "id": "84009c80-905a-4d80-ac60-822f01774c46",
          "name": "LG0101 账号密码登录()",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "login"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"user_test\",\r\n    \"password\": \"123456\"\r\n}",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.token`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`token`, value);console.log('已设置环境变量【token】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【token】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4183271,
            "createdAt": "2021-07-29T14:43:37.000Z",
            "updatedAt": "2021-08-12T16:27:18.000Z",
            "deletedAt": null,
            "apiDetailId": 5318056,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "mock": {
                    "mock": "@string"
                  },
                  "title": "权"
                },
                "id": {
                  "type": "integer",
                  "title": "用户id"
                }
              },
              "required": [
                "token",
                "id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "mock": {
                    "mock": "@cname"
                  },
                  "title": "用户名"
                },
                "password": {
                  "type": "string",
                  "mock": {
                    "mock": "@string('lower', 1, 3)"
                  },
                  "title": "密码"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5318056,
            "httpApiCaseId": 43457640,
            "httpApiName": "LG0101 账号密码登录",
            "httpApiPath": "/login",
            "httpApiMethod": "post",
            "httpApiCaseName": "",
            "id": "c3b97946-b932-480f-89e1-2812c3d25ceb",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "e748126f-a4a8-4fcc-880a-04ba6e707267",
          "name": "AT0101 创建文章(AT0101 创建文章)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"做发把办\",\n    \"description\": \"容金认对了单路见那目级只来包风。\",\n    \"content\": \"造加眼技整门步些起格走二划称。社果收取查制大水认报几治王一三系取。片十过采长因有局况命工史它组。受则也也最文何准每人别除该林地。知所地中长许转本论更九流口对条求。候心解须何三南传构连表回。\",\n    \"cover\": \"http://dummyimage.com/120x240\"\n}",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.id`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`article_id`, value);console.log('已设置环境变量【article_id】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【article_id】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4183335,
            "createdAt": "2021-07-29T15:25:08.000Z",
            "updatedAt": "2021-07-29T15:25:08.000Z",
            "deletedAt": null,
            "apiDetailId": 5318101,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "title": "文章的id",
                  "description": "注：初始化publish_time,update_time"
                }
              },
              "required": [
                "id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "mock": {
                    "mock": "@ctitle"
                  },
                  "title": "文章标题"
                },
                "description": {
                  "type": "string",
                  "mock": {
                    "mock": "@csentence"
                  },
                  "title": "文章简介"
                },
                "content": {
                  "type": "string",
                  "mock": {
                    "mock": "@cparagraph"
                  },
                  "title": "文章内容",
                  "description": "markdown"
                },
                "cover": {
                  "type": "string",
                  "mock": {
                    "mock": "@image"
                  },
                  "title": "文章封面",
                  "description": "url"
                }
              },
              "required": [
                "title",
                "description",
                "content",
                "cover"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5318101,
            "httpApiCaseId": 56381738,
            "httpApiName": "AT0101 创建文章",
            "httpApiPath": "/articles",
            "httpApiMethod": "post",
            "httpApiCaseName": "AT0101 创建文章",
            "id": "e7060544-8bf0-4905-a0c0-211ada68d350",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "2d923d3b-c8a7-42fd-a79e-25fba1c28928",
          "name": "LG0101 账号密码登录(登录用户admin)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "login"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"testtest123\"\r\n}",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.token`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`token`, value);console.log('已设置环境变量【token】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【token】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.id`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.variables.set(`user_id`, value);console.log('已设置临时变量【user_id】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【user_id】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4183271,
            "createdAt": "2021-07-29T14:43:37.000Z",
            "updatedAt": "2021-08-12T16:27:18.000Z",
            "deletedAt": null,
            "apiDetailId": 5318056,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "mock": {
                    "mock": "@string"
                  },
                  "title": "权"
                },
                "id": {
                  "type": "integer",
                  "title": "用户id"
                }
              },
              "required": [
                "token",
                "id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "mock": {
                    "mock": "@cname"
                  },
                  "title": "用户名"
                },
                "password": {
                  "type": "string",
                  "mock": {
                    "mock": "@string('lower', 1, 3)"
                  },
                  "title": "密码"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5318056,
            "httpApiCaseId": 81237471,
            "httpApiName": "LG0101 账号密码登录",
            "httpApiPath": "/login",
            "httpApiMethod": "post",
            "httpApiCaseName": "登录用户admin",
            "id": "0f8e9fd3-bcc5-44d5-a79d-b6ee198fa51a",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "b7d9d05e-c39b-467f-915c-3f847184baf9",
          "name": "AT0105 审核文章(AT0105 审核文章)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "{{article_id}}",
                "visibility"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"result\": true,\n    \"reason\": \"veniam eu in nulla sit\"\n}",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [],
          "responseDefinition": {
            "id": 27919786,
            "createdAt": "2022-03-20T01:17:01.000Z",
            "updatedAt": "2023-07-30T11:03:34.000Z",
            "deletedAt": null,
            "apiDetailId": 14440370,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "transaction_id": {
                  "type": "string"
                }
              },
              "x-apifox-orders": [
                "transaction_id"
              ],
              "required": [
                "transaction_id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "boolean",
                  "title": "审核结果"
                },
                "reason": {
                  "type": "string",
                  "title": "理由"
                }
              },
              "required": [
                "result",
                "reason"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 14440370,
            "httpApiCaseId": 81237531,
            "httpApiName": "AT0105 审核文章",
            "httpApiPath": "/articles/{id}/visibility",
            "httpApiMethod": "put",
            "httpApiCaseName": "AT0105 审核文章",
            "id": "25a8fb70-0f8f-4ccd-8c6d-6441fd0b0438",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "bfdb0be7-e2f1-4312-ad51-eac71b97dece",
          "name": "LG0101 账号密码登录(登录用户user_test)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "login"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"user_test\",\r\n    \"password\": \"123456\"\r\n}",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.token`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`token`, value);console.log('已设置环境变量【token】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【token】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.id`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`user_id`, value);console.log('已设置环境变量【user_id】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【user_id】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4183271,
            "createdAt": "2021-07-29T14:43:37.000Z",
            "updatedAt": "2021-08-12T16:27:18.000Z",
            "deletedAt": null,
            "apiDetailId": 5318056,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "mock": {
                    "mock": "@string"
                  },
                  "title": "权"
                },
                "id": {
                  "type": "integer",
                  "title": "用户id"
                }
              },
              "required": [
                "token",
                "id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "mock": {
                    "mock": "@cname"
                  },
                  "title": "用户名"
                },
                "password": {
                  "type": "string",
                  "mock": {
                    "mock": "@string('lower', 1, 3)"
                  },
                  "title": "密码"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5318056,
            "httpApiCaseId": 81237542,
            "httpApiName": "LG0101 账号密码登录",
            "httpApiPath": "/login",
            "httpApiMethod": "post",
            "httpApiCaseName": "登录用户user_test",
            "id": "941bad4b-a776-4c2d-8e48-c09e46a3cf70",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "a7afca90-1ce5-4c71-a1c1-5b64d3333863",
          "name": "AT0401 发表文章评论(成功)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "{{article_id}}",
                "comments"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"content\": \"自己给自己点赞就是个屑\",\r\n    \"parent\":0\r\n}",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.id`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`comment_id_1`, value);console.log('已设置环境变量【comment_id_1】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【comment_id_1】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4254359,
            "createdAt": "2021-07-30T08:59:13.000Z",
            "updatedAt": "2021-08-06T03:40:58.000Z",
            "deletedAt": null,
            "apiDetailId": 5339208,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "title": "评论id",
                  "mock": {
                    "mock": "@integer"
                  }
                }
              },
              "required": [
                "id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "mock": {
                    "mock": "@cparagraph"
                  },
                  "title": "评论内容"
                },
                "parent": {
                  "type": "integer",
                  "title": "父评论id，无父评论则为0",
                  "description": "评论id"
                }
              },
              "required": [
                "content"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5339208,
            "httpApiCaseId": 43458062,
            "httpApiName": "AT0401 发表文章评论",
            "httpApiPath": "/articles/{id}/comments",
            "httpApiMethod": "post",
            "httpApiCaseName": "成功",
            "id": "da0bb775-c039-4a42-8b38-187306bb4d2c",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "1b9a8bbb-f675-4825-82ef-3f2f1d327121",
          "name": "AT0401 发表文章评论(成功)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "{{article_id}}",
                "comments"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"content\": \"造命九铁积科精白标油状金新山利。万且线你心声支少中文就意阶。定断统且报从十观拉系知以存例进。青思整五党机律基美办别用步存法农维。主说节个存音圆亲去被求第白到儿间许。\",\r\n    \"parent\": {{comment_id_1}}\r\n}",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.id`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`comment_id_2`, value);console.log('已设置环境变量【comment_id_2】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【comment_id_2】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4254359,
            "createdAt": "2021-07-30T08:59:13.000Z",
            "updatedAt": "2021-08-06T03:40:58.000Z",
            "deletedAt": null,
            "apiDetailId": 5339208,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "title": "评论id",
                  "mock": {
                    "mock": "@integer"
                  }
                }
              },
              "required": [
                "id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "mock": {
                    "mock": "@cparagraph"
                  },
                  "title": "评论内容"
                },
                "parent": {
                  "type": "integer",
                  "title": "父评论id，无父评论则为0",
                  "description": "评论id"
                }
              },
              "required": [
                "content"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5339208,
            "httpApiCaseId": 67335525,
            "httpApiName": "AT0401 发表文章评论",
            "httpApiPath": "/articles/{id}/comments",
            "httpApiMethod": "post",
            "httpApiCaseName": "成功",
            "id": "f1e38a7f-314b-4f84-a5da-69dffedb8d2a",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "492441b0-f1f2-4633-8317-b592debb82d6",
          "name": "AT0404 获取文章评论(成功)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "{{article_id}}",
                "comments"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "GET",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comments[?(@.id=={{comment_id_1}})].likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (true && 0 !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(0) >= 0 ? value[0] : value[value.length + Number(0)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`like_num_1`, value);console.log('已设置环境变量【like_num_1】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【like_num_1】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comments[?(@.id=={{comment_id_2}})].likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (true && 0 !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(0) >= 0 ? value[0] : value[value.length + Number(0)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`like_num_2`, value);console.log('已设置环境变量【like_num_2】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【like_num_2】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4245943,
            "createdAt": "2021-07-30T08:38:42.000Z",
            "updatedAt": "2022-07-14T05:38:21.000Z",
            "deletedAt": null,
            "apiDetailId": 5337279,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/1011867",
                    "x-apifox-overrides": {}
                  }
                }
              },
              "required": [
                "comments"
              ],
              "x-apifox-orders": [
                "comments"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {
              "1011867": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "likes"
                ],
                "title": "comment_normal",
                "name": "comment_normal"
              },
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 5337279,
            "httpApiCaseId": 43458063,
            "httpApiName": "AT0404 获取文章评论",
            "httpApiPath": "/articles/{id}/comments",
            "httpApiMethod": "get",
            "httpApiCaseName": "成功",
            "id": "b8e1c4fe-7cf1-4aa2-a1da-7e92d934c157",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "7223053d-6329-402b-bdcb-a155b43c8c67",
          "name": "AT0405 获取评论详情(AT0405 获取评论详情)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "comments",
                "{{comment_id_1}}"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "GET",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`检验子评论数目`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comment.children.length`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`1`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 150511494,
            "createdAt": "2023-01-29T08:57:37.000Z",
            "updatedAt": "2023-01-29T08:57:37.000Z",
            "deletedAt": null,
            "apiDetailId": 59289042,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "comment": {
                  "$ref": "#/definitions/29104515"
                }
              },
              "x-apifox-orders": [
                "comment"
              ],
              "required": [
                "comment"
              ]
            },
            "defaultEnable": true,
            "projectId": 404238,
            "ordering": 1,
            "schemaDefinitions": {
              "1011867": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "likes"
                ],
                "title": "comment_normal",
                "name": "comment_normal"
              },
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              },
              "29104515": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "children": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1011867"
                    }
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  },
                  "like_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1077996"
                    },
                    "title": "点赞用户列表"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article",
                  "children",
                  "likes",
                  "like_users"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "children",
                  "likes",
                  "like_users"
                ],
                "title": "comment_all",
                "name": "comment_all"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 59289042,
            "httpApiCaseId": 81978205,
            "httpApiName": "AT0405 获取评论详情",
            "httpApiPath": "/articles/comments/{id}",
            "httpApiMethod": "get",
            "httpApiCaseName": "AT0405 获取评论详情",
            "id": "31efc97d-2158-45b7-b464-dc45343beeda",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "32a64a81-9e85-4377-a99a-706a7c45c61b",
          "name": "AT0403 评论内容批量获取(AT0403 评论内容批量获取)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "comments"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"comments\": [{{comment_id_1}},{{comment_id_2}}]\r\n}",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [],
          "responseDefinition": {
            "id": 5165180,
            "createdAt": "2021-08-23T08:42:32.000Z",
            "updatedAt": "2021-08-23T08:46:05.000Z",
            "deletedAt": null,
            "apiDetailId": 5677424,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/1011867"
                  }
                }
              },
              "required": [
                "comments"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {
              "1011867": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "likes"
                ],
                "title": "comment_normal",
                "name": "comment_normal"
              },
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "title": "评论数组",
                  "description": "内含id"
                }
              },
              "required": [
                "comments"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5677424,
            "httpApiCaseId": 43458143,
            "httpApiName": "AT0403 评论内容批量获取",
            "httpApiPath": "/articles/comments",
            "httpApiMethod": "put",
            "httpApiCaseName": "AT0403 评论内容批量获取",
            "id": "4b29e45c-8652-483d-afe0-aeb2f1e13cca",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "3bffee52-bce4-49a4-8856-2ec8f6d27f19",
          "name": "LG0101 账号密码登录(登录用户admin)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "login"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"testtest123\"\r\n}",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.token`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`token`, value);console.log('已设置环境变量【token】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【token】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.id`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.variables.set(`user_id`, value);console.log('已设置临时变量【user_id】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【user_id】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4183271,
            "createdAt": "2021-07-29T14:43:37.000Z",
            "updatedAt": "2021-08-12T16:27:18.000Z",
            "deletedAt": null,
            "apiDetailId": 5318056,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "mock": {
                    "mock": "@string"
                  },
                  "title": "权"
                },
                "id": {
                  "type": "integer",
                  "title": "用户id"
                }
              },
              "required": [
                "token",
                "id"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "mock": {
                    "mock": "@cname"
                  },
                  "title": "用户名"
                },
                "password": {
                  "type": "string",
                  "mock": {
                    "mock": "@string('lower', 1, 3)"
                  },
                  "title": "密码"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5318056,
            "httpApiCaseId": 81233609,
            "httpApiName": "LG0101 账号密码登录",
            "httpApiPath": "/login",
            "httpApiMethod": "post",
            "httpApiCaseName": "登录用户admin",
            "id": "ec1328fc-fc4f-46fa-b3a1-d152463f422d",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "86ffd655-3aaa-4a44-b458-d008313de65d",
          "name": "AT0404 获取文章评论(成功)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "{{article_id}}",
                "comments"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "GET",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comments[?(@.id=={{comment_id_1}})].likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (true && 0 !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(0) >= 0 ? value[0] : value[value.length + Number(0)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`like_num_1`, value);console.log('已设置环境变量【like_num_1】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【like_num_1】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.extractor",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        ",
                  "      try{",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comments[?(@.id=={{comment_id_2}})].likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          const jsonData = pm.response.json();",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          ",
                  "          if (true && 0 !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(0) >= 0 ? value[0] : value[value.length + Number(0)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "          ",
                  "        ",
                  "        switch (typeof value) {",
                  "          case 'object':",
                  "            value = JSON.stringify(value);",
                  "            break;",
                  "          default:",
                  "            value = String(value);",
                  "            break;",
                  "        }",
                  "      ",
                  "        pm.environment.set(`like_num_2`, value);console.log('已设置环境变量【like_num_2】，值为 【' + value + '】')",
                  "      } catch(e) {",
                  "        e.message = '提取变量【like_num_2】出错: ' + e.message;",
                  "        throw e;",
                  "      }",
                  "  ",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4245943,
            "createdAt": "2021-07-30T08:38:42.000Z",
            "updatedAt": "2022-07-14T05:38:21.000Z",
            "deletedAt": null,
            "apiDetailId": 5337279,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/1011867",
                    "x-apifox-overrides": {}
                  }
                }
              },
              "required": [
                "comments"
              ],
              "x-apifox-orders": [
                "comments"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {
              "1011867": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "likes"
                ],
                "title": "comment_normal",
                "name": "comment_normal"
              },
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 5337279,
            "httpApiCaseId": 81233682,
            "httpApiName": "AT0404 获取文章评论",
            "httpApiPath": "/articles/{id}/comments",
            "httpApiMethod": "get",
            "httpApiCaseName": "成功",
            "id": "911bf460-9f5a-4692-98a4-7e16e9da1340",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "e4b53ccc-1c5f-4ddd-af47-b27628e640c8",
          "name": "AT0406 给文章评论点赞(AT0406 给文章评论点赞)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "comments",
                "{{comment_id_1}}",
                "like"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "return_users_num",
                  "value": ""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.customScript",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        var like_num_1 = Number(pm.environment.get(\"like_num_1\"));",
                  "",
                  "pm.environment.set(\"like_num_1\",Number(like_num_1)+1);",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`点赞数判断`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{like_num_1}}`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 178188481,
            "createdAt": "2023-03-22T17:35:43.000Z",
            "updatedAt": "2023-04-08T11:26:27.000Z",
            "deletedAt": null,
            "apiDetailId": 70221319,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {},
              "x-apifox-orders": [
                "01GXG9S8QRZW0XNVS86F7MGGEN",
                "01GXG9S8QRZW0XNVS86F7MGGEN"
              ],
              "x-apifox-refs": {
                "01GXG9S8QRZW0XNVS86F7MGGEN": {
                  "$ref": "#/definitions/40169241",
                  "x-apifox-overrides": {}
                }
              },
              "required": []
            },
            "defaultEnable": true,
            "projectId": 404238,
            "ordering": 1,
            "schemaDefinitions": {
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              },
              "40169241": {
                "type": "object",
                "properties": {
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  },
                  "like_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1077996",
                      "description": "点赞用户简要信息"
                    },
                    "title": "点赞用户列表",
                    "description": "点赞的前几个用户，默认返回前5个用户"
                  },
                  "id": {
                    "title": "评论编号",
                    "type": "integer"
                  }
                },
                "x-apifox-orders": [
                  "id",
                  "likes",
                  "like_users"
                ],
                "required": [
                  "likes",
                  "like_users",
                  "id"
                ],
                "title": "comment_likes",
                "name": "comment_likes"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 70221319,
            "httpApiCaseId": 77307889,
            "httpApiName": "AT0406 给文章评论点赞",
            "httpApiPath": "/articles/comments/{id}/like",
            "httpApiMethod": "post",
            "httpApiCaseName": "AT0406 给文章评论点赞",
            "id": "94499d19-42c3-4836-bcd6-ea373118de12",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "93f161b0-bae8-4f00-9017-5db3ce8f3ce0",
          "name": "AT0406 给文章评论点赞(AT0406 给文章评论点赞)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "comments",
                "{{comment_id_2}}",
                "like"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "return_users_num",
                  "value": ""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.customScript",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        var like_num_2 = Number(pm.environment.get(\"like_num_2\"));",
                  "",
                  "pm.environment.set(\"like_num_2\",Number(like_num_2)+1);",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`$.likes 等于 {{like_num_2}}`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{like_num_2}}`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 178188481,
            "createdAt": "2023-03-22T17:35:43.000Z",
            "updatedAt": "2023-04-08T11:26:27.000Z",
            "deletedAt": null,
            "apiDetailId": 70221319,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {},
              "x-apifox-orders": [
                "01GXG9S8QRZW0XNVS86F7MGGEN",
                "01GXG9S8QRZW0XNVS86F7MGGEN"
              ],
              "x-apifox-refs": {
                "01GXG9S8QRZW0XNVS86F7MGGEN": {
                  "$ref": "#/definitions/40169241",
                  "x-apifox-overrides": {}
                }
              },
              "required": []
            },
            "defaultEnable": true,
            "projectId": 404238,
            "ordering": 1,
            "schemaDefinitions": {
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              },
              "40169241": {
                "type": "object",
                "properties": {
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  },
                  "like_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1077996",
                      "description": "点赞用户简要信息"
                    },
                    "title": "点赞用户列表",
                    "description": "点赞的前几个用户，默认返回前5个用户"
                  },
                  "id": {
                    "title": "评论编号",
                    "type": "integer"
                  }
                },
                "x-apifox-orders": [
                  "id",
                  "likes",
                  "like_users"
                ],
                "required": [
                  "likes",
                  "like_users",
                  "id"
                ],
                "title": "comment_likes",
                "name": "comment_likes"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 70221319,
            "httpApiCaseId": 81233726,
            "httpApiName": "AT0406 给文章评论点赞",
            "httpApiPath": "/articles/comments/{id}/like",
            "httpApiMethod": "post",
            "httpApiCaseName": "AT0406 给文章评论点赞",
            "id": "9ff932b2-b8d2-463b-8f0c-185903650573",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "c1da2dd7-adbb-41d0-b0aa-a3e57642bf9e",
          "name": "AT0406 给文章评论点赞(AT0406 给文章评论点赞)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "comments",
                "{{comment_id_2}}",
                "like"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "return_users_num",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "POST",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`$.likes 等于 {{like_num_2}}`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{like_num_2}}`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`返回用户数判断`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.like_users.length`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`1`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 178188481,
            "createdAt": "2023-03-22T17:35:43.000Z",
            "updatedAt": "2023-04-08T11:26:27.000Z",
            "deletedAt": null,
            "apiDetailId": 70221319,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {},
              "x-apifox-orders": [
                "01GXG9S8QRZW0XNVS86F7MGGEN",
                "01GXG9S8QRZW0XNVS86F7MGGEN"
              ],
              "x-apifox-refs": {
                "01GXG9S8QRZW0XNVS86F7MGGEN": {
                  "$ref": "#/definitions/40169241",
                  "x-apifox-overrides": {}
                }
              },
              "required": []
            },
            "defaultEnable": true,
            "projectId": 404238,
            "ordering": 1,
            "schemaDefinitions": {
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              },
              "40169241": {
                "type": "object",
                "properties": {
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  },
                  "like_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1077996",
                      "description": "点赞用户简要信息"
                    },
                    "title": "点赞用户列表",
                    "description": "点赞的前几个用户，默认返回前5个用户"
                  },
                  "id": {
                    "title": "评论编号",
                    "type": "integer"
                  }
                },
                "x-apifox-orders": [
                  "id",
                  "likes",
                  "like_users"
                ],
                "required": [
                  "likes",
                  "like_users",
                  "id"
                ],
                "title": "comment_likes",
                "name": "comment_likes"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 70221319,
            "httpApiCaseId": 81233728,
            "httpApiName": "AT0406 给文章评论点赞",
            "httpApiPath": "/articles/comments/{id}/like",
            "httpApiMethod": "post",
            "httpApiCaseName": "AT0406 给文章评论点赞",
            "id": "7673d089-e75f-420f-b65e-39bb33d328ce",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "3d15aff5-5d7a-458e-ae0b-f34773bd54e1",
          "name": "AT0407 取消文章评论点赞(AT0407 取消文章评论点赞)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "comments",
                "{{comment_id_2}}",
                "like"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "return_users_num",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "DELETE",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.customScript",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        var like_num_2 = Number(pm.environment.get('like_num_2'));",
                  "",
                  "pm.environment.set('like_num_2',Number(like_num_2)-1);",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`$.likes 等于 {{like_num_2}}`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{like_num_2}}`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.2.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`判断返回的点赞用户个数是否正确`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.like_users.length`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`0`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 178188506,
            "createdAt": "2023-03-22T17:40:06.000Z",
            "updatedAt": "2023-04-13T16:12:47.000Z",
            "deletedAt": null,
            "apiDetailId": 70221337,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {},
              "x-apifox-orders": [
                "01GXXP7HS0NP48ARXKFFZP9ZGS"
              ],
              "required": [],
              "x-apifox-refs": {
                "01GXXP7HS0NP48ARXKFFZP9ZGS": {
                  "$ref": "#/definitions/40169241"
                }
              }
            },
            "defaultEnable": true,
            "projectId": 404238,
            "ordering": 1,
            "schemaDefinitions": {
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              },
              "40169241": {
                "type": "object",
                "properties": {
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  },
                  "like_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1077996",
                      "description": "点赞用户简要信息"
                    },
                    "title": "点赞用户列表",
                    "description": "点赞的前几个用户，默认返回前5个用户"
                  },
                  "id": {
                    "title": "评论编号",
                    "type": "integer"
                  }
                },
                "x-apifox-orders": [
                  "id",
                  "likes",
                  "like_users"
                ],
                "required": [
                  "likes",
                  "like_users",
                  "id"
                ],
                "title": "comment_likes",
                "name": "comment_likes"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 70221337,
            "httpApiCaseId": 77307905,
            "httpApiName": "AT0407 取消文章评论点赞",
            "httpApiPath": "/articles/comments/{id}/like",
            "httpApiMethod": "delete",
            "httpApiCaseName": "AT0407 取消文章评论点赞",
            "id": "26cb9f5a-1ce5-4766-aee3-9415f1485770",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "f1c5b658-f82e-45c9-8e16-c488982f64b7",
          "name": "AT0404 获取文章评论(成功)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "{{article_id}}",
                "comments"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "GET",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`$.comments[?(@.id=={{comment_id_1}})].likes 等于 {{like_num_1}}`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comments[?(@.id=={{comment_id_1}})].likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (true && 0 !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(0) >= 0 ? value[0] : value[value.length + Number(0)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{like_num_1}}`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4245943,
            "createdAt": "2021-07-30T08:38:42.000Z",
            "updatedAt": "2022-07-14T05:38:21.000Z",
            "deletedAt": null,
            "apiDetailId": 5337279,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/1011867",
                    "x-apifox-overrides": {}
                  }
                }
              },
              "required": [
                "comments"
              ],
              "x-apifox-orders": [
                "comments"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {
              "1011867": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "likes"
                ],
                "title": "comment_normal",
                "name": "comment_normal"
              },
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 5337279,
            "httpApiCaseId": 77322906,
            "httpApiName": "AT0404 获取文章评论",
            "httpApiPath": "/articles/{id}/comments",
            "httpApiMethod": "get",
            "httpApiCaseName": "成功",
            "id": "d7c436ea-f6fd-412f-81e9-094e0e23afb0",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "954690d0-0d63-4581-b35b-587cc28877f2",
          "name": "AT0405 获取评论详情(AT0405 获取评论详情)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "comments",
                "{{comment_id_1}}"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "GET",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`检测点赞人数`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comment.likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`1`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`检测点赞的人的数量`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comment.like_users.length`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`1`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 150511494,
            "createdAt": "2023-01-29T08:57:37.000Z",
            "updatedAt": "2023-01-29T08:57:37.000Z",
            "deletedAt": null,
            "apiDetailId": 59289042,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "comment": {
                  "$ref": "#/definitions/29104515"
                }
              },
              "x-apifox-orders": [
                "comment"
              ],
              "required": [
                "comment"
              ]
            },
            "defaultEnable": true,
            "projectId": 404238,
            "ordering": 1,
            "schemaDefinitions": {
              "1011867": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "likes"
                ],
                "title": "comment_normal",
                "name": "comment_normal"
              },
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              },
              "29104515": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "children": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1011867"
                    }
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  },
                  "like_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1077996"
                    },
                    "title": "点赞用户列表"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article",
                  "children",
                  "likes",
                  "like_users"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "children",
                  "likes",
                  "like_users"
                ],
                "title": "comment_all",
                "name": "comment_all"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 59289042,
            "httpApiCaseId": 81981980,
            "httpApiName": "AT0405 获取评论详情",
            "httpApiPath": "/articles/comments/{id}",
            "httpApiMethod": "get",
            "httpApiCaseName": "AT0405 获取评论详情",
            "id": "80b7fd6b-1d6b-478b-8680-c927c58d9737",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "4a639c64-bca4-4be7-9eb9-b7cccbf9e111",
          "name": "AT0404 获取文章评论(成功)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "{{article_id}}",
                "comments"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "GET",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`$.comments[?(@.id=={{comment_id_2}})].likes 等于 {{like_num_2}}`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comments[?(@.id=={{comment_id_2}})].likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (true && 0 !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(0) >= 0 ? value[0] : value[value.length + Number(0)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`{{like_num_2}}`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 4245943,
            "createdAt": "2021-07-30T08:38:42.000Z",
            "updatedAt": "2022-07-14T05:38:21.000Z",
            "deletedAt": null,
            "apiDetailId": 5337279,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/1011867",
                    "x-apifox-overrides": {}
                  }
                }
              },
              "required": [
                "comments"
              ],
              "x-apifox-orders": [
                "comments"
              ]
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {
              "1011867": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "likes"
                ],
                "title": "comment_normal",
                "name": "comment_normal"
              },
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 5337279,
            "httpApiCaseId": 77323908,
            "httpApiName": "AT0404 获取文章评论",
            "httpApiPath": "/articles/{id}/comments",
            "httpApiMethod": "get",
            "httpApiCaseName": "成功",
            "id": "d824ef61-d8d4-46cd-a978-717722d6db41",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "dd692389-6c6f-43d4-8b5f-b5e1f2d3c20d",
          "name": "AT0405 获取评论详情(AT0405 获取评论详情)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "comments",
                "{{comment_id_2}}"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              }
            ],
            "method": "GET",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {},
            "type": "http"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "commonScript.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "  ____string2Array = function(value) {",
                  "    if(typeof value === 'object'){",
                  "      return value;",
                  "    }",
                  "    try {",
                  "      return JSON.parse(value);",
                  "    } catch (e) {",
                  "      return value;",
                  "    }",
                  "  }",
                  "  ____string2Number = function(value, errorMsg) {",
                  "   if(typeof value !== 'string'){",
                  "     return value;",
                  "   }",
                  "   if (/^\\-?\\d+$/.test(value)) {",
                  "       return parseInt(value);",
                  "   } else if (/^\\-?\\d+\\.\\d+$/.test(value)) {",
                  "       return parseFloat(value);",
                  "   } else {",
                  "       throw new Error(errorMsg || '数据类型不匹配')",
                  "   }",
                  " }",
                  "",
                  "  ____formatValues = function(value, stringCompareValue, comparison) {",
                  "   try{",
                  "     const isNumberComparisons = ['isBelow', 'isAtMost', 'isAbove', 'isAtLeast'].includes(comparison);",
                  "     const isCollectionComparisons = ['isOneOf', 'notOneOf'].includes(comparison);",
                  "     let compareValue;",
                  "     switch (typeof value) {",
                  "         case 'string':",
                  "             if (isNumberComparisons) {",
                  "                 value = ____string2Number(value);",
                  "                 compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "             }",
                  "              else {",
                  "                 compareValue = stringCompareValue;",
                  "             }",
                  "             break;",
                  "         case 'object':",
                  "             const isArray = value instanceof Array;",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('object 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             } else if (isCollectionComparisons && isArray) {",
                  "              throw new Error('array 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "            } else if (",
                  "              isArray &&",
                  "              comparison === 'include' &&",
                  "              value.includes(stringCompareValue)",
                  "            ) {",
                  "              compareValue = stringCompareValue;",
                  "            } else {",
                  "              try {",
                  "                  compareValue = JSON.parse(stringCompareValue);",
                  "              } catch (e) {",
                  "                  compareValue = stringCompareValue;",
                  "              }",
                  "            }",
                  "             break;",
                  "         case 'boolean':",
                  "             if (isNumberComparisons || isCollectionComparisons) {",
                  "                 throw new Error('boolean 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'true' ? true : (stringCompareValue === 'false' ? false : stringCompareValue);",
                  "             break;",
                  "           case 'bigint':",
                  "           case 'number':",
                  "             if (isNumberComparisons) {",
                  "               compareValue = ____string2Number(stringCompareValue);",
                  "             } else if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "              value = '' + value;",
                  "            } else {",
                  "               compareValue = stringCompareValue;",
                  "               value = '' + value;",
                  "             }",
                  "             break;",
                  "         case 'null':",
                  "             if (isNumberComparisons) {",
                  "                 throw new Error('null 类型的值不能使用 ' + comparison + ' 方式比较')",
                  "             }",
                  "             compareValue = stringCompareValue === 'null' ? null : stringCompareValue;",
                  "             break;",
                  "         default:",
                  "            if (isCollectionComparisons) {",
                  "              compareValue = ____string2Array(stringCompareValue);",
                  "            } else {",
                  "              compareValue = stringCompareValue;",
                  "            }",
                  "            break;",
                  "     }",
                  "     return { compareValue, value };",
                  "   } catch(e) {",
                  "     console.log(e);",
                  "     throw e;",
                  "   }",
                  " }",
                  " "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.0.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`检测点赞人数`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comment.likes`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`0`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "postProcessors.1.assertion",
                "type": "text/javascript",
                "exec": [
                  "",
                  "        if (JSON.setEnableBigInt) {",
                  "          JSON.setEnableBigInt(undefined);",
                  "        }",
                  "        pm.test(pm.variables.replaceIn(`检测点赞的人的数量`), function() {",
                  "        ",
                  "          const expression = pm.variables.replaceIn(`$.comment.like_users.length`);",
                  "          const JSONPath = require('jsonpath-plus').JSONPath;",
                  "          let jsonData;",
                  "          try {",
                  "            jsonData = pm.response.json();",
                  "          } catch(e) {",
                  "            let text = pm.response.text();",
                  "            const xml2js = require('xml2js');",
                  "            text = text.replace(/^[^<]*/, '').replace(/[^>]*$/, '');",
                  "            let json;",
                  "            let xmlParseOptions = {",
                  "                explicitArray: false,",
                  "                trim: true,",
                  "                ignoreAttrs: true,",
                  "            };",
                  "            xml2js.parseString(text, xmlParseOptions, function (_, result) {",
                  "                jsonData = result;",
                  "            });",
                  "          }",
                  "          let value = JSONPath({",
                  "            json: jsonData,",
                  "            path: expression,",
                  "            wrap: false",
                  "          });",
                  "",
                  "          if (false && undefined !== undefined) {",
                  "            if (Array.isArray(value)) {",
                  "              value = Number(undefined) >= 0 ? value[undefined] : value[value.length + Number(undefined)];",
                  "            } else {",
                  "              value = undefined;",
                  "            }",
                  "          }",
                  "",
                  "          ",
                  "        const formattedValues = ____formatValues(value, pm.variables.replaceIn(`0`), 'equal');",
                  "        pm.expect(formattedValues.value).to.eql(formattedValues.compareValue);",
                  "      });",
                  "      "
                ]
              }
            }
          ],
          "responseDefinition": {
            "id": 150511494,
            "createdAt": "2023-01-29T08:57:37.000Z",
            "updatedAt": "2023-01-29T08:57:37.000Z",
            "deletedAt": null,
            "apiDetailId": 59289042,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {
                "comment": {
                  "$ref": "#/definitions/29104515"
                }
              },
              "x-apifox-orders": [
                "comment"
              ],
              "required": [
                "comment"
              ]
            },
            "defaultEnable": true,
            "projectId": 404238,
            "ordering": 1,
            "schemaDefinitions": {
              "1011867": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "likes"
                ],
                "title": "comment_normal",
                "name": "comment_normal"
              },
              "1077996": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "type": "string",
                    "mock": {
                      "mock": "@cname"
                    },
                    "title": "用户名"
                  },
                  "avatar": {
                    "type": "string",
                    "mock": {
                      "mock": "@image('100x100')"
                    },
                    "title": "头像"
                  },
                  "id": {
                    "type": "integer",
                    "title": "用户id"
                  }
                },
                "required": [
                  "nickname",
                  "avatar",
                  "id"
                ],
                "title": "user_simple",
                "name": "user_simple"
              },
              "29104515": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "title": "评论id"
                  },
                  "user": {
                    "title": "评论用户",
                    "description": "用户id",
                    "$ref": "#/definitions/1077996",
                    "x-apifox-overrides": {}
                  },
                  "content": {
                    "type": "string",
                    "title": "评论内容",
                    "mock": {
                      "mock": "@cparagraph"
                    }
                  },
                  "time": {
                    "type": "string",
                    "mock": {
                      "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
                    },
                    "title": "评论时间"
                  },
                  "parent": {
                    "type": "integer",
                    "title": "父评论id",
                    "description": "评论id"
                  },
                  "article": {
                    "type": "integer",
                    "title": "评论文章",
                    "description": "文章id"
                  },
                  "children": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1011867"
                    }
                  },
                  "likes": {
                    "title": "点赞数",
                    "type": "integer"
                  },
                  "like_users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/1077996"
                    },
                    "title": "点赞用户列表"
                  }
                },
                "required": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "article",
                  "children",
                  "likes",
                  "like_users"
                ],
                "x-apifox-orders": [
                  "id",
                  "user",
                  "content",
                  "time",
                  "parent",
                  "article",
                  "children",
                  "likes",
                  "like_users"
                ],
                "title": "comment_all",
                "name": "comment_all"
              }
            }
          },
          "requestDefinition": {
            "jsonSchema": {}
          },
          "metaInfo": {
            "httpApiId": 59289042,
            "httpApiCaseId": 81983827,
            "httpApiName": "AT0405 获取评论详情",
            "httpApiPath": "/articles/comments/{id}",
            "httpApiMethod": "get",
            "httpApiCaseName": "AT0405 获取评论详情",
            "id": "4892e6b2-486a-42e0-b78f-b285e04f743b",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        },
        {
          "id": "aeb93a72-70e6-4e77-884e-a4e85dce7b5b",
          "name": "AT0402 删除文章评论（和子孙评论）(AT0402 删除文章评论（和子孙评论）)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8000",
              "path": [
                "articles",
                "{{article_id}}",
                "comments"
              ],
              "host": [
                "127",
                "0",
                "0",
                "1"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "key": "token",
                "value": "{{token}}"
              },
              {
                "key": "User-Agent",
                "value": "Apifox/1.0.0 (https://www.apifox.cn)"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "baseUrl": "http://127.0.0.1:8000",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\": {{comment_id_1}}\r\n}",
              "generateMode": "normal",
              "type": "application/json"
            },
            "type": "http"
          },
          "response": [],
          "event": [],
          "responseDefinition": {
            "id": 4254385,
            "createdAt": "2021-07-30T09:01:48.000Z",
            "updatedAt": "2021-07-30T09:01:48.000Z",
            "deletedAt": null,
            "apiDetailId": 5339227,
            "name": "成功",
            "code": 200,
            "contentType": "json",
            "jsonSchema": {
              "type": "object",
              "properties": {}
            },
            "defaultEnable": true,
            "projectId": 0,
            "ordering": 1,
            "schemaDefinitions": {}
          },
          "requestDefinition": {
            "jsonSchema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "mock": {
                    "mock": "@integer"
                  },
                  "title": "评论id"
                }
              },
              "required": [
                "id"
              ]
            }
          },
          "metaInfo": {
            "httpApiId": 5339227,
            "httpApiCaseId": 43458142,
            "httpApiName": "AT0402 删除文章评论（和子孙评论）",
            "httpApiPath": "/articles/{id}/comments",
            "httpApiMethod": "delete",
            "httpApiCaseName": "AT0402 删除文章评论（和子孙评论）",
            "id": "8d111007-9731-491d-aba2-a54bb4848bbc",
            "type": "http"
          },
          "type": "http",
          "protocolProfileBehavior": {
            "useWhatWGUrlParser": false,
            "disableUrlEncoding": false
          }
        }
      ],
      "name": "文章评论 理想情况"
    }
  ],
  "info": {
    "name": "文章评论 理想情况"
  },
  "dataSchemas": {
    "1011867": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "title": "评论id"
        },
        "user": {
          "title": "评论用户",
          "description": "用户id",
          "$ref": "#/definitions/1077996",
          "x-apifox-overrides": {}
        },
        "content": {
          "type": "string",
          "title": "评论内容",
          "mock": {
            "mock": "@cparagraph"
          }
        },
        "time": {
          "type": "string",
          "mock": {
            "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
          },
          "title": "评论时间"
        },
        "parent": {
          "type": "integer",
          "title": "父评论id",
          "description": "评论id"
        },
        "article": {
          "type": "integer",
          "title": "评论文章",
          "description": "文章id"
        },
        "likes": {
          "title": "点赞数",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "user",
        "content",
        "time",
        "article"
      ],
      "x-apifox-orders": [
        "id",
        "user",
        "content",
        "time",
        "parent",
        "article",
        "likes"
      ],
      "title": "comment_normal",
      "name": "comment_normal"
    },
    "1077996": {
      "type": "object",
      "properties": {
        "nickname": {
          "type": "string",
          "mock": {
            "mock": "@cname"
          },
          "title": "用户名"
        },
        "avatar": {
          "type": "string",
          "mock": {
            "mock": "@image('100x100')"
          },
          "title": "头像"
        },
        "id": {
          "type": "integer",
          "title": "用户id"
        }
      },
      "required": [
        "nickname",
        "avatar",
        "id"
      ],
      "title": "user_simple",
      "name": "user_simple"
    },
    "29104515": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "title": "评论id"
        },
        "user": {
          "title": "评论用户",
          "description": "用户id",
          "$ref": "#/definitions/1077996",
          "x-apifox-overrides": {}
        },
        "content": {
          "type": "string",
          "title": "评论内容",
          "mock": {
            "mock": "@cparagraph"
          }
        },
        "time": {
          "type": "string",
          "mock": {
            "mock": "@datetime('yyyy-MM-dd HH:mm:ss')"
          },
          "title": "评论时间"
        },
        "parent": {
          "type": "integer",
          "title": "父评论id",
          "description": "评论id"
        },
        "article": {
          "type": "integer",
          "title": "评论文章",
          "description": "文章id"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/1011867"
          }
        },
        "likes": {
          "title": "点赞数",
          "type": "integer"
        },
        "like_users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/1077996"
          },
          "title": "点赞用户列表"
        }
      },
      "required": [
        "id",
        "user",
        "content",
        "time",
        "article",
        "children",
        "likes",
        "like_users"
      ],
      "x-apifox-orders": [
        "id",
        "user",
        "content",
        "time",
        "parent",
        "article",
        "children",
        "likes",
        "like_users"
      ],
      "title": "comment_all",
      "name": "comment_all"
    },
    "40169241": {
      "type": "object",
      "properties": {
        "likes": {
          "title": "点赞数",
          "type": "integer"
        },
        "like_users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/1077996",
            "description": "点赞用户简要信息"
          },
          "title": "点赞用户列表",
          "description": "点赞的前几个用户，默认返回前5个用户"
        },
        "id": {
          "title": "评论编号",
          "type": "integer"
        }
      },
      "x-apifox-orders": [
        "id",
        "likes",
        "like_users"
      ],
      "required": [
        "likes",
        "like_users",
        "id"
      ],
      "title": "comment_likes",
      "name": "comment_likes"
    }
  },
  "mockRules": {
    "rules": [],
    "enableSystemRule": true
  },
  "environment": {
    "id": 510825,
    "name": "测试环境",
    "baseUrl": "http://127.0.0.1:8000",
    "baseUrls": {
      "default": "http://127.0.0.1:8000"
    },
    "variable": {
      "id": "2f3e6a01-3123-4489-86c2-19bb177c6636",
      "name": "测试环境",
      "baseUrl": "http://127.0.0.1:8000",
      "baseUrls": {
        "default": "http://127.0.0.1:8000"
      },
      "values": [
        {
          "type": "any",
          "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWQiOjEsImV4cCI6MTY5MTMzNDQxOC4xNzgyMjZ9.G4VOuMCrE_SwF3qw1Nq8fIwILC2AhUmQ3TlTmv3vnjs",
          "key": "token",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "87",
          "key": "quiz_id",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "word_id_2",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "word_id_1",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "token_2",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "word_id_3",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "2",
          "key": "user_id",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "17",
          "key": "article_id",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "comment_id_1",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "comment_id_2",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "",
          "key": "like_num_2",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": 6,
          "key": "num_pre",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "7",
          "key": "num_later",
          "initialValue": ""
        },
        {
          "type": "any",
          "value": "2",
          "key": "id",
          "initialValue": "2"
        },
        {
          "type": "any",
          "value": "13",
          "key": "music_id",
          "initialValue": "13"
        },
        {
          "type": "any",
          "value": "undefined",
          "key": "rewards_id",
          "initialValue": "undefined"
        },
        {
          "type": "any",
          "value": "undefined",
          "key": "title_id",
          "initialValue": "undefined"
        },
        {
          "type": "any",
          "value": "SP000011",
          "key": "products_id",
          "initialValue": "SP000011"
        },
        {
          "type": "any",
          "value": "DD000024",
          "key": "order_id",
          "isBindInitial": false,
          "initialValue": "undefined"
        },
        {
          "type": "any",
          "value": "JL000039",
          "key": "transaction_id",
          "initialValue": "JL000039"
        }
      ]
    },
    "type": "normal",
    "parameter": {
      "header": [],
      "query": [],
      "body": [],
      "cookie": []
    }
  },
  "globals": {
    "baseUrl": "",
    "baseUrls": {},
    "variable": {
      "id": "e362dfca-4c10-492d-9417-57d2a77ff8dc",
      "baseUrl": "",
      "baseUrls": {},
      "values": []
    },
    "parameter": {
      "header": [],
      "query": [],
      "body": [],
      "cookie": []
    }
  },
  "isServerBuild": false,
  "isTestFlowControl": false
}
